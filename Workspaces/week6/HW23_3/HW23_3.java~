
import java.util.*;
public class HW23_3 {
	public static void main(String[] args) {
		System.out.printf("%12s%12s%12s%12s%12s%12s%12s%12s\n", "Array", "Selection", "Insertion", "Bubble", "Merge",
				"Quick", "Heap", "Radix");
		System.out.printf("%12s%12s%12s%12s%12s%12s%12s%12s\n", "Size", "Sort", "Sort", "Sort", "Sort", "Sort", "Sort",
				"Sort");

		int[] list;
		int[] list1;
		Integer[] list2;
		long startTime;
		long endTime;
		long[][] executionTime = new long[6][7];

		final int BASE = 10000;
		for (int k = 0; k < 6; k++) {
			list = new int[(k + 1) * BASE];
			list1 = new int[(k + 1) * BASE];
			list2 = new Integer[(k + 1) * BASE];
			for (int i = 0; i < list.length; i++) {
				list[i] = (int) (Math.random() * 100000);
				list1[i] = list[i];
				list2[i] = list[i];
			}

			startTime = System.nanoTime();
			selectionSort(list);
			endTime = System.nanoTime();
			executionTime[k][0] = endTime - startTime;

			startTime = System.nanoTime();
			copyList(list1, list);
			insertionSort(list);
			endTime = System.nanoTime();
			executionTime[k][1] = endTime - startTime;

			startTime = System.nanoTime();
			copyList(list1, list);
			bubbleSort(list);
			endTime = System.nanoTime();
			executionTime[k][2] = endTime - startTime;

			startTime = System.nanoTime();
			copyList(list1, list);
			mergeSort(list);
			endTime = System.nanoTime();
			executionTime[k][3] = endTime - startTime;

			startTime = System.nanoTime();
			copyList(list1, list);
			quickSort(list);
			endTime = System.nanoTime();
			executionTime[k][4] = endTime - startTime;

			startTime = System.nanoTime();
			heapSort(list2);
			endTime = System.nanoTime();
			executionTime[k][5] = endTime - startTime;

			startTime = System.nanoTime();
			copyList(list1, list);
			radixSort(list);
			endTime = System.nanoTime();
			executionTime[k][6] = endTime - startTime;
		}

		for (int i = 0; i < 6; i++) {
			System.out.printf("%12d", BASE + i * BASE);
			for (int j = 0; j < 7; j++)
				System.out.printf("%12d", executionTime[i][j]);
			System.out.println();
		}
	}

	public static void selectionSort(int[] list) {
		for(int i = 0; i < list.length; i++) {
            int min = list[i];
            int lowIndex = i;
            for(int j = 0; j < list.length; j++) {
                if(list[j] < min) {
                    min = list[j];
                    lowIndex = j;
                }

                list[lowIndex] = list[i];
                list[i] = min;
                
            }
        }
	}

	public static void insertionSort(int[] list) {
	    for(int i = 1; i < list.length; i++) {
            int currentElement = list[i];
            int k;
            for (k = i -1; k >= 0 && list[k] > currentElement; k--) {
                list[k+1] = list[k];
            }

            list[k+1] = currentElement;
        }	
	}

	public static void bubbleSort(int[] list) {
		for (int k = 1; k < list.length; k++) {
            boolean needNextPass = false;
            for (int i = 0; i < list.length - k; i++) {
                if(list[i] > list[i+1]) {
                    int temp = list[i];
                    list[i] = list[i+1];
                    list[i+1] = temp;

                    needNextPass = true;
                }
            }
        }
	}

    public static void mergeSort(int[] list) {
        if (list.length > 1) {
           int[] firstHalf = new int[list.length / 2];
           System.arraycopy(list, 0, firstHalf, 0, list.length / 2);
           mergeSort(firstHalf);

           int secondHalfLength = list.length - list.length / 2;
           int[] secondHalf = new int[secondHalfLength];
           System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);
           mergeSort(secondHalf);

           merge(firstHalf, secondHalf, list);
    }
  }


      public static void merge(int[] list1, int[] list2, int[] temp) {
          int current1 = 0;
          int current2 = 0;
          int current3 = 0;

          while (current1 < list1.length && current2 < list2.length) {
              if (list1[current1] < list2[current2]) {
                  temp[current3++] = list1[current1++];
              } 
              else {
                  temp[current3++] = list2[current2++];
              }
          }

          while (current1 < list1.length) {
            temp[current3++] = list1[current1++];
          }

          while (current2 < list2.length) {
            temp[current3++] = list2[current2++];
          }
      }

    public static void quickSort(int[] list) {
        quickSort(list, 0, list.length - 1);
      }

      private static void quickSort(int[] list, int first, int last) {
        if (last > first) {
          int pivotIndex = partition(list, first, last);
          quickSort(list, first, pivotIndex - 1);
          quickSort(list, pivotIndex + 1, last);
        }
      }

      private static int partition(int[] list, int first, int last) {
        int pivot = list[first]; 
        int low = first + 1; 
        int high = last; 

        while (high > low) {
          while (low <= high && list[low] <= pivot)
            low++;

          while (low <= high && list[high] > pivot)
            high--;

          if (high > low) {
            int temp = list[high];
            list[high] = list[low];
            list[low] = temp;
          }
        }

        while (high > first && list[high] >= pivot)
          high--;

        if (pivot > list[high]) {
          list[first] = list[high];
          list[high] = pivot;
          return high;
        }
        else {
          return first;
        }
      }	
    public static <E extends Comparable> void heapSort(E[] list) {
        // Create a Heap of integers
        Heap<E> heap = new Heap<E>();

        // Add elements to the heap
        for (int i = 0; i < list.length; i++)
          heap.add(list[i]);

        // Remove elements from the heap
        for (int i = list.length - 1; i >= 0; i--)
          list[i] = heap.remove();
   }
  

	static void radixSort(int[] array) {
        ArrayList<ArrayList<Integer>> bucket = new ArrayList<ArrayList<Integer>>();
        for(int i = 0; i < 10; i++) {
            bucket.add(new ArrayList<Integer>());
        }
        int maxDigits = array[0];
        for(int i = 0; i < array.length; i++) {
            if (maxDigits < array[i]) {
            }
        }

        int maxNumOfDigits = String.valueOf(maxDigits).length();
        for(int i = 0; i < maxNumOfDigits; i++) {
            for(Integer j : array) {
                int current = getRadix(i, j);
                
                bucket.get(current).add(j); 
            }
            int k = 0;
            for(int j = 0; j < 10; j++) {
                if(bucket.get(j) != null) {
                    for(int l = 0; l < bucket.get(j).size(); l++) {
                        array[k++] = bucket.get(j).get(l);
                    }
                    bucket.get(j).clear();
                }    
            }
        }
    }

    static int getRadix(int position, Integer n) {
        String nString = n.toString(); 
        
        if(nString.length() - 1 - position < 0) {
            return 0;
        }
        else {
            int returnValue = Character.getNumericValue(nString.charAt(nString.length() - 1 - position));
            return(returnValue);
        }
    }

	public static void copyList(int[] list1, int[] list) {
		for (int i = 0; i < list1.length; i++)
			list[i] = list1[i];
	}
}
